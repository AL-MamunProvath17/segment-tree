#include<bits/stdc++.h>
 using namespace std;
 int arr[100001];
 int tree[3*100001];
 void init(int node, int b, int e)
{
    if (b == e) {
        tree[node] = arr[b];
        return;
    }
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    init(Left, b, mid);
    init(Right, mid + 1, e);
    tree[node] = tree[Left] + tree[Right];
}
int query(int node, int b, int e, int i, int j)
{
    if (i > e || j < b)
        return 0;
    if (b >= i && e <= j)
        return tree[node];
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    int p1 = query(Left, b, mid, i, j);
    int p2 = query(Right, mid + 1, e, i, j);
    return p1 + p2;
}
 void update(int node, int b, int e, int i, int newvalue)
{
    if (i > e || i < b)
        return;
    if (b >= i && e <= i) {
        tree[node] += newvalue ;
        return;
    }
    int Left = node * 2;
    int Right = node * 2 + 1;
    int mid = (b + e) / 2;
    update(Left, b, mid, i, newvalue);
    update(Right, mid + 1, e, i, newvalue);
    tree[node] = tree[Left] + tree[Right];
}
 int main()
 {    ios_base::sync_with_stdio(0);
    cin.tie(0);
     int n,i,x,y,t,j,k,q,z;
     cin>>t;

     for(int ca=1;ca<=t;t++){
         cin>>n>>q;
         for(int i=1;i<=n;i++) cin>>arr[i];
         init(1,1,n);//create
         cout<<"Case "<<ca<<":"<<endl;
         for(k=1;k<=q;k++)
         {
             cin>>x;
             if(x==1)
             {
                  cin>>y;
                  y+=1;
                  int ans=query(1,1,n,y,y);
                  //print sum of just one element
                  cout<<ans<<endl;
                  update(1,1,n,y,-ans);

             }
             else if(x==2)
             {
                 cin>>y>>z;
                 y=y+1;
                 update(1,1,n,y,y);

             }
             else
             {
                 cin>>y>>z;
                 y+=1;
                 z+=1;
                 cout<<query(1,1,n,y,z)<<endl;;
                 //sum printing
             }
         }}

 }
